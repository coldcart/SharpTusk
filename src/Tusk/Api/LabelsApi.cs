/*
 * Tusk Logistics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: devsupport@tusklogistics.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net.Http;
using Tusk.Client;
using Tusk.Model;

namespace Tusk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILabelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a Label by ID
        /// </summary>
        /// <remarks>
        /// Returns information about a Label
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <returns>Label</returns>
        Label GetaLabelbyID(int labelId);

        /// <summary>
        /// Get a Label by ID
        /// </summary>
        /// <remarks>
        /// Returns information about a Label
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <returns>ApiResponse of Label</returns>
        ApiResponse<Label> GetaLabelbyIDWithHttpInfo(int labelId);
        /// <summary>
        /// Purchase Labels
        /// </summary>
        /// <remarks>
        /// Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <returns>ShipmentPurchaseResponse</returns>
        ShipmentPurchaseResponse PurchaseLabels(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?));

        /// <summary>
        /// Purchase Labels
        /// </summary>
        /// <remarks>
        /// Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of ShipmentPurchaseResponse</returns>
        ApiResponse<ShipmentPurchaseResponse> PurchaseLabelsWithHttpInfo(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?));
        /// <summary>
        /// Void a Label
        /// </summary>
        /// <remarks>
        /// Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <returns></returns>
        void VoidaLabel(int labelId);

        /// <summary>
        /// Void a Label
        /// </summary>
        /// <remarks>
        /// Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VoidaLabelWithHttpInfo(int labelId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILabelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a Label by ID
        /// </summary>
        /// <remarks>
        /// Returns information about a Label
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Label</returns>
        System.Threading.Tasks.Task<Label> GetaLabelbyIDAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Label by ID
        /// </summary>
        /// <remarks>
        /// Returns information about a Label
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Label)</returns>
        System.Threading.Tasks.Task<ApiResponse<Label>> GetaLabelbyIDWithHttpInfoAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Purchase Labels
        /// </summary>
        /// <remarks>
        /// Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentPurchaseResponse</returns>
        System.Threading.Tasks.Task<ShipmentPurchaseResponse> PurchaseLabelsAsync(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Purchase Labels
        /// </summary>
        /// <remarks>
        /// Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentPurchaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentPurchaseResponse>> PurchaseLabelsWithHttpInfoAsync(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Void a Label
        /// </summary>
        /// <remarks>
        /// Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VoidaLabelAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Void a Label
        /// </summary>
        /// <remarks>
        /// Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VoidaLabelWithHttpInfoAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILabelsApi : ILabelsApiSync, ILabelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LabelsApi : IDisposable, ILabelsApi
    {
        private Tusk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LabelsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LabelsApi(string basePath)
        {
            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                new Tusk.Client.ReadableConfiguration { BasePath = basePath }
            );
            this.ApiClient = new Tusk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="readableConfiguration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LabelsApi(Tusk.Client.ReadableConfiguration readableConfiguration)
        {
            if (readableConfiguration == null) throw new ArgumentNullException("readableConfiguration");

            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                readableConfiguration
            );
            this.ApiClient = new Tusk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LabelsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LabelsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                new Tusk.Client.ReadableConfiguration { BasePath = basePath }
            );
            this.ApiClient = new Tusk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="readableConfiguration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LabelsApi(HttpClient client, Tusk.Client.ReadableConfiguration readableConfiguration, HttpClientHandler handler = null)
        {
            if (readableConfiguration == null) throw new ArgumentNullException("readableConfiguration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                readableConfiguration
            );
            this.ApiClient = new Tusk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LabelsApi(Tusk.Client.ISynchronousClient client, Tusk.Client.IAsynchronousClient asyncClient, Tusk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Tusk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tusk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tusk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tusk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tusk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a Label by ID Returns information about a Label
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <returns>Label</returns>
        public Label GetaLabelbyID(int labelId)
        {
            Tusk.Client.ApiResponse<Label> localVarResponse = GetaLabelbyIDWithHttpInfo(labelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Label by ID Returns information about a Label
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <returns>ApiResponse of Label</returns>
        public Tusk.Client.ApiResponse<Label> GetaLabelbyIDWithHttpInfo(int labelId)
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("label_id", Tusk.Client.ClientUtils.ParameterToString(labelId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Label>("/v1/label/{label_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetaLabelbyID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Label by ID Returns information about a Label
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Label</returns>
        public async System.Threading.Tasks.Task<Label> GetaLabelbyIDAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tusk.Client.ApiResponse<Label> localVarResponse = await GetaLabelbyIDWithHttpInfoAsync(labelId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Label by ID Returns information about a Label
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of Label to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Label)</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<Label>> GetaLabelbyIDWithHttpInfoAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("label_id", Tusk.Client.ClientUtils.ParameterToString(labelId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Label>("/v1/label/{label_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetaLabelbyID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Labels Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <returns>ShipmentPurchaseResponse</returns>
        public ShipmentPurchaseResponse PurchaseLabels(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?))
        {
            Tusk.Client.ApiResponse<ShipmentPurchaseResponse> localVarResponse = PurchaseLabelsWithHttpInfo(v1LabelsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Labels Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of ShipmentPurchaseResponse</returns>
        public Tusk.Client.ApiResponse<ShipmentPurchaseResponse> PurchaseLabelsWithHttpInfo(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?))
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1LabelsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentPurchaseResponse>("/v1/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurchaseLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Labels Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentPurchaseResponse</returns>
        public async System.Threading.Tasks.Task<ShipmentPurchaseResponse> PurchaseLabelsAsync(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tusk.Client.ApiResponse<ShipmentPurchaseResponse> localVarResponse = await PurchaseLabelsWithHttpInfoAsync(v1LabelsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Labels Purchase Labels. This will also create the Shipment provided. The number of labels purchased will match the number of parcels provided in the shipment.  At this time, there is only one service, \&quot;Tusk Ground\&quot;. This endpoint will purchase Label(s) for that service.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1LabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentPurchaseResponse)</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<ShipmentPurchaseResponse>> PurchaseLabelsWithHttpInfoAsync(V1LabelsRequest? v1LabelsRequest = default(V1LabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1LabelsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentPurchaseResponse>("/v1/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurchaseLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void a Label Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <returns></returns>
        public void VoidaLabel(int labelId)
        {
            VoidaLabelWithHttpInfo(labelId);
        }

        /// <summary>
        /// Void a Label Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tusk.Client.ApiResponse<Object> VoidaLabelWithHttpInfo(int labelId)
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("label_id", Tusk.Client.ClientUtils.ParameterToString(labelId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/label/{label_id}/void", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidaLabel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void a Label Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VoidaLabelAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await VoidaLabelWithHttpInfoAsync(labelId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Void a Label Void the Label, setting its status to CANCELLED, ensuring it will not be charged. Only Labels in CREATED status can be voided.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="labelId">ID of the Label to void.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<Object>> VoidaLabelWithHttpInfoAsync(int labelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("label_id", Tusk.Client.ClientUtils.ParameterToString(labelId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/label/{label_id}/void", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidaLabel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
