/*
 * Tusk Logistics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: devsupport@tusklogistics.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net.Http;
using Tusk.Client;
using Tusk.Model;

namespace Tusk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManifestApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Labels to Manifest
        /// </summary>
        /// <remarks>
        /// Add labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <returns>ManifestOperationResponse</returns>
        ManifestOperationResponse AddLabelstoManifest(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?));

        /// <summary>
        /// Add Labels to Manifest
        /// </summary>
        /// <remarks>
        /// Add labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of ManifestOperationResponse</returns>
        ApiResponse<ManifestOperationResponse> AddLabelstoManifestWithHttpInfo(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?));
        /// <summary>
        /// Create a Manifest
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <returns>ManifestOperationResponse</returns>
        ManifestOperationResponse CreateaManifest(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?));

        /// <summary>
        /// Create a Manifest
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <returns>ApiResponse of ManifestOperationResponse</returns>
        ApiResponse<ManifestOperationResponse> CreateaManifestWithHttpInfo(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?));
        /// <summary>
        /// Get a Manifest by ID
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <returns>Manifest</returns>
        Manifest GetaManifestbyID(int manifestId);

        /// <summary>
        /// Get a Manifest by ID
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <returns>ApiResponse of Manifest</returns>
        ApiResponse<Manifest> GetaManifestbyIDWithHttpInfo(int manifestId);
        /// <summary>
        /// Remove Labels from Manifest
        /// </summary>
        /// <remarks>
        /// Remove labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <returns>ManifestOperationResponse</returns>
        ManifestOperationResponse RemoveLabelsfromManifest(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?));

        /// <summary>
        /// Remove Labels from Manifest
        /// </summary>
        /// <remarks>
        /// Remove labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of ManifestOperationResponse</returns>
        ApiResponse<ManifestOperationResponse> RemoveLabelsfromManifestWithHttpInfo(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManifestApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Labels to Manifest
        /// </summary>
        /// <remarks>
        /// Add labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManifestOperationResponse</returns>
        System.Threading.Tasks.Task<ManifestOperationResponse> AddLabelstoManifestAsync(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Labels to Manifest
        /// </summary>
        /// <remarks>
        /// Add labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManifestOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManifestOperationResponse>> AddLabelstoManifestWithHttpInfoAsync(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Manifest
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManifestOperationResponse</returns>
        System.Threading.Tasks.Task<ManifestOperationResponse> CreateaManifestAsync(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Manifest
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManifestOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManifestOperationResponse>> CreateaManifestWithHttpInfoAsync(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Manifest by ID
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Manifest</returns>
        System.Threading.Tasks.Task<Manifest> GetaManifestbyIDAsync(int manifestId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Manifest by ID
        /// </summary>
        /// <remarks>
        /// Create manifest for a location with or without labels.
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        System.Threading.Tasks.Task<ApiResponse<Manifest>> GetaManifestbyIDWithHttpInfoAsync(int manifestId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove Labels from Manifest
        /// </summary>
        /// <remarks>
        /// Remove labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManifestOperationResponse</returns>
        System.Threading.Tasks.Task<ManifestOperationResponse> RemoveLabelsfromManifestAsync(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove Labels from Manifest
        /// </summary>
        /// <remarks>
        /// Remove labels to an existing manifest
        /// </remarks>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManifestOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManifestOperationResponse>> RemoveLabelsfromManifestWithHttpInfoAsync(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManifestApi : IManifestApiSync, IManifestApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManifestApi : IDisposable, IManifestApi
    {
        private Tusk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ManifestApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ManifestApi(string basePath)
        {
            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                new Tusk.Client.ReadableConfiguration { BasePath = basePath }
            );
            this.ApiClient = new Tusk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="readableConfiguration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ManifestApi(Tusk.Client.ReadableConfiguration readableConfiguration)
        {
            if (readableConfiguration == null) throw new ArgumentNullException("readableConfiguration");

            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                readableConfiguration
            );
            this.ApiClient = new Tusk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ManifestApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ManifestApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                new Tusk.Client.ReadableConfiguration { BasePath = basePath }
            );
            this.ApiClient = new Tusk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="readableConfiguration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ManifestApi(HttpClient client, Tusk.Client.ReadableConfiguration readableConfiguration, HttpClientHandler handler = null)
        {
            if (readableConfiguration == null) throw new ArgumentNullException("readableConfiguration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Tusk.Client.ReadableConfiguration.MergeConfigurations(
                Tusk.Client.GlobalReadableConfiguration.Instance,
                readableConfiguration
            );
            this.ApiClient = new Tusk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ManifestApi(Tusk.Client.ISynchronousClient client, Tusk.Client.IAsynchronousClient asyncClient, Tusk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tusk.Client.ReadableConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Tusk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tusk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tusk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tusk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tusk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Labels to Manifest Add labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <returns>ManifestOperationResponse</returns>
        public ManifestOperationResponse AddLabelstoManifest(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?))
        {
            Tusk.Client.ApiResponse<ManifestOperationResponse> localVarResponse = AddLabelstoManifestWithHttpInfo(manifestId, v1ManifestAddlabelsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Labels to Manifest Add labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of ManifestOperationResponse</returns>
        public Tusk.Client.ApiResponse<ManifestOperationResponse> AddLabelstoManifestWithHttpInfo(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?))
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manifest_id", Tusk.Client.ClientUtils.ParameterToString(manifestId)); // path parameter
            localVarRequestOptions.Data = v1ManifestAddlabelsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManifestOperationResponse>("/v1/manifest/{manifest_id}/addlabels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLabelstoManifest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Labels to Manifest Add labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManifestOperationResponse</returns>
        public async System.Threading.Tasks.Task<ManifestOperationResponse> AddLabelstoManifestAsync(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tusk.Client.ApiResponse<ManifestOperationResponse> localVarResponse = await AddLabelstoManifestWithHttpInfoAsync(manifestId, v1ManifestAddlabelsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Labels to Manifest Add labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestAddlabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManifestOperationResponse)</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<ManifestOperationResponse>> AddLabelstoManifestWithHttpInfoAsync(int manifestId, V1ManifestAddlabelsRequest? v1ManifestAddlabelsRequest = default(V1ManifestAddlabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manifest_id", Tusk.Client.ClientUtils.ParameterToString(manifestId)); // path parameter
            localVarRequestOptions.Data = v1ManifestAddlabelsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ManifestOperationResponse>("/v1/manifest/{manifest_id}/addlabels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLabelstoManifest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Manifest Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <returns>ManifestOperationResponse</returns>
        public ManifestOperationResponse CreateaManifest(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?))
        {
            Tusk.Client.ApiResponse<ManifestOperationResponse> localVarResponse = CreateaManifestWithHttpInfo(v1ManifestCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Manifest Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <returns>ApiResponse of ManifestOperationResponse</returns>
        public Tusk.Client.ApiResponse<ManifestOperationResponse> CreateaManifestWithHttpInfo(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?))
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1ManifestCreateRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManifestOperationResponse>("/v1/manifest/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateaManifest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Manifest Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManifestOperationResponse</returns>
        public async System.Threading.Tasks.Task<ManifestOperationResponse> CreateaManifestAsync(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tusk.Client.ApiResponse<ManifestOperationResponse> localVarResponse = await CreateaManifestWithHttpInfoAsync(v1ManifestCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Manifest Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1ManifestCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManifestOperationResponse)</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<ManifestOperationResponse>> CreateaManifestWithHttpInfoAsync(V1ManifestCreateRequest? v1ManifestCreateRequest = default(V1ManifestCreateRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1ManifestCreateRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ManifestOperationResponse>("/v1/manifest/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateaManifest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Manifest by ID Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <returns>Manifest</returns>
        public Manifest GetaManifestbyID(int manifestId)
        {
            Tusk.Client.ApiResponse<Manifest> localVarResponse = GetaManifestbyIDWithHttpInfo(manifestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Manifest by ID Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <returns>ApiResponse of Manifest</returns>
        public Tusk.Client.ApiResponse<Manifest> GetaManifestbyIDWithHttpInfo(int manifestId)
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manifest_id", Tusk.Client.ClientUtils.ParameterToString(manifestId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Manifest>("/v1/manifest/{manifest_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetaManifestbyID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Manifest by ID Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Manifest</returns>
        public async System.Threading.Tasks.Task<Manifest> GetaManifestbyIDAsync(int manifestId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tusk.Client.ApiResponse<Manifest> localVarResponse = await GetaManifestbyIDWithHttpInfoAsync(manifestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Manifest by ID Create manifest for a location with or without labels.
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<Manifest>> GetaManifestbyIDWithHttpInfoAsync(int manifestId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manifest_id", Tusk.Client.ClientUtils.ParameterToString(manifestId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Manifest>("/v1/manifest/{manifest_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetaManifestbyID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Labels from Manifest Remove labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <returns>ManifestOperationResponse</returns>
        public ManifestOperationResponse RemoveLabelsfromManifest(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?))
        {
            Tusk.Client.ApiResponse<ManifestOperationResponse> localVarResponse = RemoveLabelsfromManifestWithHttpInfo(manifestId, v1ManifestRemovelabelsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Labels from Manifest Remove labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of ManifestOperationResponse</returns>
        public Tusk.Client.ApiResponse<ManifestOperationResponse> RemoveLabelsfromManifestWithHttpInfo(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?))
        {
            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manifest_id", Tusk.Client.ClientUtils.ParameterToString(manifestId)); // path parameter
            localVarRequestOptions.Data = v1ManifestRemovelabelsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManifestOperationResponse>("/v1/manifest/{manifest_id}/removelabels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLabelsfromManifest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Labels from Manifest Remove labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManifestOperationResponse</returns>
        public async System.Threading.Tasks.Task<ManifestOperationResponse> RemoveLabelsfromManifestAsync(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Tusk.Client.ApiResponse<ManifestOperationResponse> localVarResponse = await RemoveLabelsfromManifestWithHttpInfoAsync(manifestId, v1ManifestRemovelabelsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Labels from Manifest Remove labels to an existing manifest
        /// </summary>
        /// <exception cref="Tusk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">ID of Manifest to operate</param>
        /// <param name="v1ManifestRemovelabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManifestOperationResponse)</returns>
        public async System.Threading.Tasks.Task<Tusk.Client.ApiResponse<ManifestOperationResponse>> RemoveLabelsfromManifestWithHttpInfoAsync(int manifestId, V1ManifestRemovelabelsRequest? v1ManifestRemovelabelsRequest = default(V1ManifestRemovelabelsRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Tusk.Client.RequestOptions localVarRequestOptions = new Tusk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tusk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tusk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manifest_id", Tusk.Client.ClientUtils.ParameterToString(manifestId)); // path parameter
            localVarRequestOptions.Data = v1ManifestRemovelabelsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ManifestOperationResponse>("/v1/manifest/{manifest_id}/removelabels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLabelsfromManifest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
