/*
 * Tusk Logistics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: devsupport@tusklogistics.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

namespace Tusk.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : BaseModel
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructor]
        public Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="name">Contact person at this address..</param>
        /// <param name="company">Company name for this address. Required if Is_Residential is false..</param>
        /// <param name="isResidential">Flag indicating whether the address is residential. If omitted, it is assumed to be true..</param>
        /// <param name="street1">First line of the street address. (required).</param>
        /// <param name="street2">Second line of the street address. May not be needed..</param>
        /// <param name="city">Name of the city. (required).</param>
        /// <param name="state">2-letter abbreviation of the state. (required).</param>
        /// <param name="country">2-letter country code. Tusk currently only supports US addresses..</param>
        /// <param name="postalCode">Postal code. (required).</param>
        /// <param name="phone">Phone number of the contact person at this address..</param>
        /// <param name="email">Email of the contact person at this address..</param>
        public Address(string name = default(string), string company = default(string), bool isResidential = default(bool), string street1 = default(string), string street2 = default(string), string city = default(string), string state = default(string), string country = default(string), string postalCode = default(string), string phone = default(string), string email = default(string))
        {
            // to ensure "street1" is required (not null)
            if (street1 == null)
            {
                throw new ArgumentNullException("street1 is a required property for Address and cannot be null");
            }
            this.Street1 = street1;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Address and cannot be null");
            }
            this.City = city;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for Address and cannot be null");
            }
            this.State = state;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for Address and cannot be null");
            }
            this.PostalCode = postalCode;
            this.Name = name;
            this.Company = company;
            this.IsResidential = isResidential;
            this.Street2 = street2;
            this.Country = country;
            this.Phone = phone;
            this.Email = email;
        }

        /// <summary>
        /// Contact person at this address.
        /// </summary>
        /// <value>Contact person at this address.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Company name for this address. Required if Is_Residential is false.
        /// </summary>
        /// <value>Company name for this address. Required if Is_Residential is false.</value>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        [JsonPropertyName("company")]
        public string? Company { get; set; }

        /// <summary>
        /// Flag indicating whether the address is residential. If omitted, it is assumed to be true.
        /// </summary>
        /// <value>Flag indicating whether the address is residential. If omitted, it is assumed to be true.</value>
        [DataMember(Name = "is_residential", EmitDefaultValue = true)]
        [JsonPropertyName("is_residential")]
        public bool? IsResidential { get; set; } = true;

        /// <summary>
        /// First line of the street address.
        /// </summary>
        /// <value>First line of the street address.</value>
        [DataMember(Name = "street1", IsRequired = true, EmitDefaultValue = true)]
        [JsonPropertyName("street1")]
        public string? Street1 { get; set; }

        /// <summary>
        /// Second line of the street address. May not be needed.
        /// </summary>
        /// <value>Second line of the street address. May not be needed.</value>
        [DataMember(Name = "street2", EmitDefaultValue = false)]
        [JsonPropertyName("street2")]
        public string? Street2 { get; set; }

        /// <summary>
        /// Name of the city.
        /// </summary>
        /// <value>Name of the city.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        [JsonPropertyName("city")]
        public string? City { get; set; }

        /// <summary>
        /// 2-letter abbreviation of the state.
        /// </summary>
        /// <value>2-letter abbreviation of the state.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        [JsonPropertyName("state")]
        public string? State { get; set; }

        /// <summary>
        /// 2-letter country code. Tusk currently only supports US addresses.
        /// </summary>
        /// <value>2-letter country code. Tusk currently only supports US addresses.</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonPropertyName("country")]
        public string? Country { get; set; }

        /// <summary>
        /// Postal code.
        /// </summary>
        /// <value>Postal code.</value>
        [DataMember(Name = "postal_code", IsRequired = true, EmitDefaultValue = true)]
        [JsonPropertyName("postal_code")]
        public string? PostalCode { get; set; }

        /// <summary>
        /// Phone number of the contact person at this address.
        /// </summary>
        /// <value>Phone number of the contact person at this address.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        [JsonPropertyName("phone")]
        public string? Phone { get; set; }

        /// <summary>
        /// Email of the contact person at this address.
        /// </summary>
        /// <value>Email of the contact person at this address.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        [JsonPropertyName("email")]
        public string? Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  IsResidential: ").Append(IsResidential).Append("\n");
            sb.Append("  Street1: ").Append(Street1).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

}